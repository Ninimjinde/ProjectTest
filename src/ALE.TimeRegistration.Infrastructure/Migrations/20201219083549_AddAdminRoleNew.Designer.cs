// <auto-generated />
using System;
using ALE.TimeRegistration.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ALE.TimeRegistration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201219083549_AddAdminRoleNew")]
    partial class AddAdminRoleNew
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000200"),
                            Info = "Create API Items",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create API",
                            UploadDate = new DateTime(2018, 10, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 18, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000201"),
                            Info = "Fix issues Items API",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API issues",
                            UploadDate = new DateTime(2018, 10, 15, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 28, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000202"),
                            Info = "Create new properties Item object",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create properties",
                            UploadDate = new DateTime(2018, 10, 18, 9, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 28, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000203"),
                            Info = "Link Item to new API vendor",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API vendor link",
                            UploadDate = new DateTime(2018, 10, 19, 8, 35, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 8, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000204"),
                            Info = "Migrate objects to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "migrate objects",
                            UploadDate = new DateTime(2019, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000205"),
                            Info = "Create all API's for website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "create API's",
                            UploadDate = new DateTime(2019, 8, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 30, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000206"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 9, 20, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 21, 44, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000207"),
                            Info = "Finish website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "finish website",
                            UploadDate = new DateTime(2019, 9, 23, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 18, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000208"),
                            Info = "Automate pricing and promo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "automate",
                            UploadDate = new DateTime(2019, 10, 2, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 5, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000209"),
                            Info = "Upload data for demo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "demodata",
                            UploadDate = new DateTime(2020, 2, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 31, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000210"),
                            Info = "Migrate data Electrabel to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "migrate data",
                            UploadDate = new DateTime(2020, 2, 21, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 8, 41, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000211"),
                            Info = "Fix issues website selling page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "fix website issues",
                            UploadDate = new DateTime(2020, 5, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 15, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000212"),
                            Info = "Rebuild itempage website and link new products",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "itempage",
                            UploadDate = new DateTime(2020, 5, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 7, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000213"),
                            Info = "Automate selling process and work with new API's",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "automation",
                            UploadDate = new DateTime(2020, 5, 17, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 6, 39, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000214"),
                            Info = "Finish all processes and link to website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "finish automation",
                            UploadDate = new DateTime(2020, 5, 18, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 55, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000215"),
                            Info = "Create new website and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "create website",
                            UploadDate = new DateTime(2018, 3, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 22, 10, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000216"),
                            Info = "Update al items in database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "update items",
                            UploadDate = new DateTime(2018, 3, 25, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000217"),
                            Info = "Automate promo's and guid for admin",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "promo's",
                            UploadDate = new DateTime(2018, 3, 26, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 1, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000218"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000105"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2018, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 0, 12, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000219"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2020, 7, 12, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 47, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000220"),
                            Info = "Link API's to new database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "link API's",
                            UploadDate = new DateTime(2020, 7, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 35, 38, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000221"),
                            Info = "Fix issues with order page on website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2020, 10, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 26, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000222"),
                            Info = "Create link order page and new billing page customer and automate proces",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "link order page",
                            UploadDate = new DateTime(2020, 10, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 45, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000223"),
                            Info = "Fix issue billing page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "issue billing",
                            UploadDate = new DateTime(2020, 10, 16, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 51, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000224"),
                            Info = "Create new order page for customers Europe",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2019, 11, 5, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000225"),
                            Info = "Create API for database to link with order page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "API orderpage",
                            UploadDate = new DateTime(2019, 11, 6, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 6, 5, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000226"),
                            Info = "Create new page for customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "customer portal",
                            UploadDate = new DateTime(2019, 11, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000227"),
                            Info = "Fix issues customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "issues customer portal",
                            UploadDate = new DateTime(2019, 11, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 20, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000228"),
                            Info = "Create API Items and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "API items",
                            UploadDate = new DateTime(2020, 2, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 24, 6, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000229"),
                            Info = "Fix app issues for customer login page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "app issues",
                            UploadDate = new DateTime(2019, 4, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000230"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000111"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2020, 6, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 7, 41, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000231"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000112"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 11, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 10, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000232"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000113"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2018, 10, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 11, 31, 50, 0)
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TaskId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000400"),
                            ReceiverId = "00000000-0000-0000-0000-000000000006",
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "Please update your work asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000401"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201"),
                            Text = "Can I get more info about the task please?"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000402"),
                            ReceiverId = "00000000-0000-0000-0000-000000000007",
                            SenderId = "00000000-0000-0000-0000-000000000002",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202"),
                            Text = "Please do this asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000403"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "What should I do when I finish?"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000300"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000301"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000302"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000303"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000304"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203")
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            Name = "Toyota Motor"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Name = "Colruyt"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Name = "Engie Electrabel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Name = "Janssen Pharmaceutica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Name = "Total Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Name = "BASF Antwerpen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            Name = "Delhaize De Leeuw"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            Name = "Volvo Car Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            Name = "ArcelorMittal Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000109"),
                            Name = "Mastercard Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000110"),
                            Name = "Proximus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000111"),
                            Name = "AXA Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000112"),
                            Name = "Allianz Benelux"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000113"),
                            Name = "Daikin Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000114"),
                            Name = "bpost"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7eaa428-d59b-49fc-bdeb-f2b37b4048c6",
                            Email = "EchtElkeKant@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Kant",
                            LockoutEnabled = false,
                            Name = "Elke",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08997253-9e6d-4130-9e02-fabefe47872b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0daedb8a-803b-47d6-a0d6-c6dddd118527",
                            Email = "Ialwayswin@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Pot",
                            LockoutEnabled = false,
                            Name = "Jack",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7b2dab7-eeec-428d-a052-6e1209931a45",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60a067cc-7cf5-425a-9df5-c504f1d9f6de",
                            Email = "ErnaVanvoren@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Vanvoren",
                            LockoutEnabled = false,
                            Name = "Erna",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b535b76-f807-400c-8254-b0c6d6a786bb",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46351018-442d-4bee-8abf-fd9df8aa0d6a",
                            Email = "RogerDoeniemee@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Vangenechte",
                            LockoutEnabled = false,
                            Name = "Roger",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b1057cc-7dc6-4df9-9ce2-e9090c8b412d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b5eb76a-8a22-401d-a488-81ea902d0fd2",
                            Email = "CharlesDurue@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Verstraete",
                            LockoutEnabled = false,
                            Name = "Karel",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbecbb53-102e-4003-925f-a8f32d025c47",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b375dbb-11c3-47df-bea2-3472bb5332e2",
                            Email = "Katringring@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Vanbelleghem",
                            LockoutEnabled = false,
                            Name = "Katleen",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6049ed7-a29e-42a3-8825-0f6e7e38b65c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce525691-fb58-49a0-8f12-a131ae80d046",
                            Email = "SnelnEddy@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Guapo",
                            LockoutEnabled = false,
                            Name = "Edwardo",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5728fc9-ae61-472c-9e5a-72e411bbe6c3",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64fbc69b-0703-4ded-9f87-7d2cb727d9f9",
                            Email = "Andy123@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Degught",
                            LockoutEnabled = false,
                            Name = "Andy",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d25b2f58-cc29-4d48-bea1-fbbf77d9b6de",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d70a35e-3487-4f8e-8b93-b772a3657fea",
                            Email = "IloveyouTomorrow@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Demain",
                            LockoutEnabled = false,
                            Name = "Annie",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e872442-7bda-4d19-82e3-78980e27cc6b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9c742f9-4c9b-46be-a656-299927616261",
                            Email = "Satchel@steelpanther.com",
                            EmailConfirmed = false,
                            LastName = "Parrish",
                            LockoutEnabled = false,
                            Name = "Russ",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46ae68dd-d884-4447-bc14-73678e44ecfe",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06fa017b-eddb-41b9-ac41-22adbef7f2df",
                            Email = "DePijpVanMaarten@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Pijpers",
                            LockoutEnabled = false,
                            Name = "Maarten",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82b15a48-d56c-42e6-add3-356a34dcf916",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "040f32ed-a766-4644-a256-6f76b296cb85",
                            Email = "EdwardLeCanard@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Vaneende",
                            LockoutEnabled = false,
                            Name = "Edward",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6f918b1-c12d-4bc1-92b5-90ae6df0d7b2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e866b04-1380-423e-ba0b-3b0c5b275d7d",
                            Email = "DeYoeri@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Declerk",
                            LockoutEnabled = false,
                            Name = "Yoeri",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fbe2356-91aa-4832-b9af-45a9e44fb221",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d71f1009-9636-4ead-a51d-421c611f550e",
                            Email = "CalmingCamille@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Thee",
                            LockoutEnabled = false,
                            Name = "Camille",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a15d7c31-742b-4c22-842a-45ddf5062a0d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbd0df08-eb4b-4627-ad6d-45068fb8c4c2",
                            Email = "Thebestginger@qotsa.com",
                            EmailConfirmed = false,
                            LastName = "Homme",
                            LockoutEnabled = false,
                            Name = "Josh",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b60ca086-73c2-41a5-8dd3-f826fd9eaddb",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "979d251d-b82d-4b2a-816a-3bf322e1895d",
                            Email = "Zwaffelaere@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Uytebroeck",
                            LockoutEnabled = false,
                            Name = "Piet",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "014ef737-e148-4fb3-bb46-d874e5f477f8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12e710eb-7f22-485e-b014-5e5ba4445afe",
                            Email = "SterkeJan33@pandora.be",
                            EmailConfirmed = false,
                            LastName = "Lefort",
                            LockoutEnabled = false,
                            Name = "Jan",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f055c671-2f6e-424d-832e-0734517949cb",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e1681ee-84bf-4d6d-8d86-77db8990497d",
                            Email = "RietjeGessof@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Gessof",
                            LockoutEnabled = false,
                            Name = "Rita",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6f62a05-c9a0-4432-9b95-314426dcc119",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9a332d0-6acf-4a17-8bd5-a12346ec4bd5",
                            Email = "willywilly@thescabs.be",
                            EmailConfirmed = false,
                            LastName = "Lambregt",
                            LockoutEnabled = false,
                            Name = "Willy",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe08bc31-36cc-4b13-a8fa-f02e583cf196",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e28c898b-8b5c-4254-8d84-2584672e1fa8",
                            Email = "PescadoLover@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Vervis",
                            LockoutEnabled = false,
                            Name = "Kelly",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2b14b5a-4e93-45d0-a4ca-74688b01d6fd",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000022",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f94aa69-69c3-45b2-8635-e952e0a559cb",
                            Email = "TomVanmarcke@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Vantomme",
                            LockoutEnabled = false,
                            Name = "Marc",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b9c410a-8a3a-4320-9538-a72733e06d6b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000023",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd5a958c-7269-4d78-9960-8d82d3288cd5",
                            Email = "Loewiloewie@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Decruy",
                            LockoutEnabled = false,
                            Name = "Louis",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a6bf07d-a5be-4f12-b732-77983a2cab7d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000024",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8d72bfa-12e2-4e7a-86d4-c29f198992b3",
                            Email = "Giezijtem@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Emnie",
                            LockoutEnabled = false,
                            Name = "Ben",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe4ccde3-da2e-4285-a2cd-ddfdbb985d37",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000025",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da84a928-f085-4b43-9ab5-4f9bfc9295de",
                            Email = "ConnieBeter@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Moeleker",
                            LockoutEnabled = false,
                            Name = "Connie",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9d3d5e2-0e5d-40b2-b5e9-db76e999e2a9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000026",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a872a1cf-c31e-4b08-aefd-fa37f083cc5e",
                            Email = "GezondePeter@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Celie",
                            LockoutEnabled = false,
                            Name = "Peter",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e37d4e05-037c-4f94-b881-0d6e38fffd76",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000027",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19ad1cc0-5321-43bc-a594-71267a89069b",
                            Email = "Bennernie@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Thuys",
                            LockoutEnabled = false,
                            Name = "Benny",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45179a9f-52ea-4f37-b2cd-3ab9c2ecfc46",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ecc5683-1619-4ddc-a05b-569f0ce0d26d",
                            Email = "Thebestbusker@london.com",
                            EmailConfirmed = false,
                            LastName = "Cole",
                            LockoutEnabled = false,
                            Name = "Cam",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3286f182-fd6a-4f30-a6f5-bd158ec87c07",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000029",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "493d7269-00c4-47ab-a812-4a0e7ccf5efa",
                            Email = "CoronaTopper@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Root",
                            LockoutEnabled = false,
                            Name = "Claude",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a61ba6b0-570f-432c-b369-45565bba4f7f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000030",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f7a599f-0b7e-4c9a-9a30-4614972ae74f",
                            Email = "rapgewoon@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Wenne",
                            LockoutEnabled = false,
                            Name = "Eve",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aaec2e5d-f0df-4828-8ffd-b40d60b737c0",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc58",
                            Email = "aboynamedsue@JCash.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ABOYNAMEDSUE@JCASH.COM",
                            NormalizedUserName = "ABOYNAMEDSUE@JCASH.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELDp6qhlaOUyZiTq++0WhNe/FynURZTVs6Qhejl/Jd0MShmlRkmE1SrCnq8JfKChNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TwoFactorEnabled = false,
                            UserName = "aboynamedsue@JCash.com"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000007",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000008",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000008",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000204")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000009",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000205")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000010",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000206")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000207")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000208")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000209")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000015",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000210")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000016",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000211")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000017",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000212")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000020",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000213")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000020",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000214")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000215")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000216")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000217")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000022",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000218")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000023",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000219")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000024",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000220")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000024",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000221")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000025",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000223")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000017",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000224")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000025",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000225")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000026",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000226")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000027",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000227")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000028",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000228")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000029",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000229")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000030",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000230")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000015",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000231")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000030",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000232")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "6617ed95-a00f-484d-905c-19522d37aeac",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Messages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Pictures")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("TaskUsers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
