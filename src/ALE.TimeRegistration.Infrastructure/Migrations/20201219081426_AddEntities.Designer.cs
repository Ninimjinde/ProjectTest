// <auto-generated />
using System;
using ALE.TimeRegistration.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ALE.TimeRegistration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201219081426_AddEntities")]
    partial class AddEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000200"),
                            Info = "Create API Items",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create API",
                            UploadDate = new DateTime(2018, 10, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 18, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000201"),
                            Info = "Fix issues Items API",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API issues",
                            UploadDate = new DateTime(2018, 10, 15, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 28, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000202"),
                            Info = "Create new properties Item object",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create properties",
                            UploadDate = new DateTime(2018, 10, 18, 9, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 28, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000203"),
                            Info = "Link Item to new API vendor",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API vendor link",
                            UploadDate = new DateTime(2018, 10, 19, 8, 35, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 8, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000204"),
                            Info = "Migrate objects to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "migrate objects",
                            UploadDate = new DateTime(2019, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000205"),
                            Info = "Create all API's for website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "create API's",
                            UploadDate = new DateTime(2019, 8, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 30, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000206"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 9, 20, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 21, 44, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000207"),
                            Info = "Finish website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "finish website",
                            UploadDate = new DateTime(2019, 9, 23, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 18, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000208"),
                            Info = "Automate pricing and promo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "automate",
                            UploadDate = new DateTime(2019, 10, 2, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 5, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000209"),
                            Info = "Upload data for demo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "demodata",
                            UploadDate = new DateTime(2020, 2, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 31, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000210"),
                            Info = "Migrate data Electrabel to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "migrate data",
                            UploadDate = new DateTime(2020, 2, 21, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 8, 41, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000211"),
                            Info = "Fix issues website selling page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "fix website issues",
                            UploadDate = new DateTime(2020, 5, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 15, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000212"),
                            Info = "Rebuild itempage website and link new products",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "itempage",
                            UploadDate = new DateTime(2020, 5, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 7, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000213"),
                            Info = "Automate selling process and work with new API's",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "automation",
                            UploadDate = new DateTime(2020, 5, 17, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 6, 39, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000214"),
                            Info = "Finish all processes and link to website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "finish automation",
                            UploadDate = new DateTime(2020, 5, 18, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 55, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000215"),
                            Info = "Create new website and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "create website",
                            UploadDate = new DateTime(2018, 3, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 22, 10, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000216"),
                            Info = "Update al items in database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "update items",
                            UploadDate = new DateTime(2018, 3, 25, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000217"),
                            Info = "Automate promo's and guid for admin",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "promo's",
                            UploadDate = new DateTime(2018, 3, 26, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 1, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000218"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000105"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2018, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 0, 12, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000219"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2020, 7, 12, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 47, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000220"),
                            Info = "Link API's to new database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "link API's",
                            UploadDate = new DateTime(2020, 7, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 35, 38, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000221"),
                            Info = "Fix issues with order page on website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2020, 10, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 26, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000222"),
                            Info = "Create link order page and new billing page customer and automate proces",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "link order page",
                            UploadDate = new DateTime(2020, 10, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 45, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000223"),
                            Info = "Fix issue billing page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "issue billing",
                            UploadDate = new DateTime(2020, 10, 16, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 51, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000224"),
                            Info = "Create new order page for customers Europe",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2019, 11, 5, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000225"),
                            Info = "Create API for database to link with order page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "API orderpage",
                            UploadDate = new DateTime(2019, 11, 6, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 6, 5, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000226"),
                            Info = "Create new page for customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "customer portal",
                            UploadDate = new DateTime(2019, 11, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000227"),
                            Info = "Fix issues customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "issues customer portal",
                            UploadDate = new DateTime(2019, 11, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 20, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000228"),
                            Info = "Create API Items and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "API items",
                            UploadDate = new DateTime(2020, 2, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 24, 6, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000229"),
                            Info = "Fix app issues for customer login page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "app issues",
                            UploadDate = new DateTime(2019, 4, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000230"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000111"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2020, 6, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 7, 41, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000231"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000112"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 11, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 10, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000232"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000113"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2018, 10, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 11, 31, 50, 0)
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TaskId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000400"),
                            ReceiverId = "00000000-0000-0000-0000-000000000006",
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "Please update your work asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000401"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201"),
                            Text = "Can I get more info about the task please?"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000402"),
                            ReceiverId = "00000000-0000-0000-0000-000000000007",
                            SenderId = "00000000-0000-0000-0000-000000000002",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202"),
                            Text = "Please do this asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000403"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "What should I do when I finish?"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000300"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000301"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000302"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000303"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000304"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203")
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            Name = "Toyota Motor"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Name = "Colruyt"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Name = "Engie Electrabel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Name = "Janssen Pharmaceutica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Name = "Total Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Name = "BASF Antwerpen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            Name = "Delhaize De Leeuw"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            Name = "Volvo Car Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            Name = "ArcelorMittal Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000109"),
                            Name = "Mastercard Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000110"),
                            Name = "Proximus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000111"),
                            Name = "AXA Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000112"),
                            Name = "Allianz Benelux"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000113"),
                            Name = "Daikin Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000114"),
                            Name = "bpost"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "857c4624-941c-4127-ae74-1b67670b3792",
                            Email = "aboynamedsue@JCash.com",
                            EmailConfirmed = false,
                            LastName = "Cash",
                            LockoutEnabled = false,
                            Name = "Johnny",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8385a882-1c3a-40b2-b201-5b2717fd7b76",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15b1f9e8-3362-4541-a0d7-f52ac2fa7491",
                            Email = "EchtElkeKant@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Kant",
                            LockoutEnabled = false,
                            Name = "Elke",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc1b69c3-38c6-4595-bbdd-dcd4cc6503c7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53f7a6c5-9d37-4642-9271-3ff35d18ef48",
                            Email = "Ialwayswin@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Pot",
                            LockoutEnabled = false,
                            Name = "Jack",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1928128-4d0d-43c2-b2d3-9079c2b66ebe",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7935e405-b59b-4740-beb3-9379b962ae23",
                            Email = "ErnaVanvoren@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Vanvoren",
                            LockoutEnabled = false,
                            Name = "Erna",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7683ed26-1b1f-4844-89cd-175f2ff89b57",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c50bd3e5-a65b-4a3a-8cb9-8a986ac09fad",
                            Email = "RogerDoeniemee@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Vangenechte",
                            LockoutEnabled = false,
                            Name = "Roger",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f560637-d19c-48d0-8efe-136c8741254c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c0416a5-b190-4e57-92e9-c211d0235f54",
                            Email = "CharlesDurue@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Verstraete",
                            LockoutEnabled = false,
                            Name = "Karel",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69af7683-af34-406a-b5b4-9fa28d5085fa",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccfb8273-f578-4d24-bedb-d0c464235ed0",
                            Email = "Katringring@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Vanbelleghem",
                            LockoutEnabled = false,
                            Name = "Katleen",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a92d0f0-0b84-4f56-9dbd-27730fb09dc8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ca63a80-4212-413b-98a2-3d0e1b334b9a",
                            Email = "SnelnEddy@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Guapo",
                            LockoutEnabled = false,
                            Name = "Edwardo",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ddd4441-a1f9-4707-98ef-b74ef5b28190",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97cc35a9-fdeb-4e13-a82e-43ef3c78a582",
                            Email = "Andy123@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Degught",
                            LockoutEnabled = false,
                            Name = "Andy",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08981b36-deac-422b-9224-09c4d97e4835",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bb281b6-8da9-4d2f-8507-90c50144ed84",
                            Email = "IloveyouTomorrow@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Demain",
                            LockoutEnabled = false,
                            Name = "Annie",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "739a2083-6df1-42ac-ad8c-b3628a6f340c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6daa98a0-ca92-45ae-a24d-bc661f8ae5d9",
                            Email = "Satchel@steelpanther.com",
                            EmailConfirmed = false,
                            LastName = "Parrish",
                            LockoutEnabled = false,
                            Name = "Russ",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "506eeb49-6813-4929-a27d-6adf86def9d3",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07002654-8119-4818-8080-6f9cd9d11f1d",
                            Email = "DePijpVanMaarten@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Pijpers",
                            LockoutEnabled = false,
                            Name = "Maarten",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6110d4ca-ed04-4b96-aa32-23051df5aa33",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "939860e6-7163-46b5-ba7c-b9d19faa87f3",
                            Email = "EdwardLeCanard@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Vaneende",
                            LockoutEnabled = false,
                            Name = "Edward",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e743937f-83ae-483a-a621-52c363cd8869",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "daa56554-650b-400e-a734-6753a2a25ea6",
                            Email = "DeYoeri@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Declerk",
                            LockoutEnabled = false,
                            Name = "Yoeri",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d01f7d66-ec4d-4719-9e93-e8daedc3cf01",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b496f56-eea6-4272-8a42-3a58f5a6e9ff",
                            Email = "CalmingCamille@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Thee",
                            LockoutEnabled = false,
                            Name = "Camille",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47efeea8-3986-4daf-8de5-1546f43e8ac4",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39718872-e197-4313-9d83-3f2e8707302d",
                            Email = "Thebestginger@qotsa.com",
                            EmailConfirmed = false,
                            LastName = "Homme",
                            LockoutEnabled = false,
                            Name = "Josh",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f57180f-46be-4482-b325-eb3c5312bcf8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2ebf7cf-36c0-44ac-8e2c-92312156d1d5",
                            Email = "Zwaffelaere@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Uytebroeck",
                            LockoutEnabled = false,
                            Name = "Piet",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cafc5b6d-78c6-4abc-abbf-55d809ef740b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f43ec0fc-7fd2-4e86-b7a4-22529740db43",
                            Email = "SterkeJan33@pandora.be",
                            EmailConfirmed = false,
                            LastName = "Lefort",
                            LockoutEnabled = false,
                            Name = "Jan",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d28712a3-74cc-4eeb-8d38-0e819089f0f5",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92b22664-ca95-472b-975a-bdec4dc8cb96",
                            Email = "RietjeGessof@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Gessof",
                            LockoutEnabled = false,
                            Name = "Rita",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "566ed7cf-6a35-406f-afbd-8539d4d62187",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b7d43a3-bc72-4c7d-8694-d3f9ea1dac45",
                            Email = "willywilly@thescabs.be",
                            EmailConfirmed = false,
                            LastName = "Lambregt",
                            LockoutEnabled = false,
                            Name = "Willy",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c9a2b7c-9a82-44f4-b18e-08196395c691",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1547275-dd88-41d6-a7f5-0df0cfd351e0",
                            Email = "PescadoLover@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Vervis",
                            LockoutEnabled = false,
                            Name = "Kelly",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90fe5367-adb0-4b91-954c-ac448924a234",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000022",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57d2a237-d333-4b3e-9f07-2c98a1044bc1",
                            Email = "TomVanmarcke@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Vantomme",
                            LockoutEnabled = false,
                            Name = "Marc",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2519a553-9182-496a-96c9-454c816ce427",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000023",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc9fb322-201b-40ea-af21-e450feeda94f",
                            Email = "Loewiloewie@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Decruy",
                            LockoutEnabled = false,
                            Name = "Louis",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4ac387d-b190-46f2-b24b-7845c27e2756",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000024",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "003b56e3-8d5a-449b-b32e-5017b522f1c0",
                            Email = "Giezijtem@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Emnie",
                            LockoutEnabled = false,
                            Name = "Ben",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d972679-da8b-43ec-b3b7-29fa17e07f4e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000025",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64bec3c7-2d7e-4927-864e-7435bf7af49e",
                            Email = "ConnieBeter@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Moeleker",
                            LockoutEnabled = false,
                            Name = "Connie",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c586ef0-cbb4-4735-a86e-1324fa8d98ef",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000026",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2105ea36-3416-4574-b327-76f948065dc6",
                            Email = "GezondePeter@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Celie",
                            LockoutEnabled = false,
                            Name = "Peter",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65343b0f-6074-4f8c-b8df-73a661562cb6",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000027",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f64c636b-99a1-4699-a32c-066d9c903884",
                            Email = "Bennernie@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Thuys",
                            LockoutEnabled = false,
                            Name = "Benny",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a08331bf-7587-488f-8982-a5e891d0854e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8731784-c915-41db-88f8-546917f1140b",
                            Email = "Thebestbusker@london.com",
                            EmailConfirmed = false,
                            LastName = "Cole",
                            LockoutEnabled = false,
                            Name = "Cam",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57200627-a1cc-4683-b139-27f397d0aa56",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000029",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a72b148-44c6-45f4-b5b3-df515ac50f54",
                            Email = "CoronaTopper@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Root",
                            LockoutEnabled = false,
                            Name = "Claude",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1fe242b-06b4-4a6c-9796-07c2aea4581b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000030",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5e4dd5c-b543-428e-8098-9d39026c54fd",
                            Email = "rapgewoon@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Wenne",
                            LockoutEnabled = false,
                            Name = "Eve",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13ac17bf-1b97-4956-a8a0-fd5d641576b3",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000007",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000008",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000008",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000204")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000009",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000205")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000010",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000206")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000207")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000208")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000209")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000015",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000210")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000016",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000211")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000017",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000212")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000020",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000213")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000020",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000214")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000215")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000216")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000217")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000022",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000218")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000023",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000219")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000024",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000220")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000024",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000221")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000025",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000223")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000017",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000224")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000025",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000225")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000026",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000226")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000027",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000227")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000028",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000228")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000029",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000229")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000030",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000230")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000015",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000231")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000030",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000232")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Messages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Pictures")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("TaskUsers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
