// <auto-generated />
using System;
using ALE.TimeRegistration.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ALE.TimeRegistration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201219081819_AddAdminRole")]
    partial class AddAdminRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000200"),
                            Info = "Create API Items",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create API",
                            UploadDate = new DateTime(2018, 10, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 18, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000201"),
                            Info = "Fix issues Items API",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API issues",
                            UploadDate = new DateTime(2018, 10, 15, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 28, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000202"),
                            Info = "Create new properties Item object",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create properties",
                            UploadDate = new DateTime(2018, 10, 18, 9, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 28, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000203"),
                            Info = "Link Item to new API vendor",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API vendor link",
                            UploadDate = new DateTime(2018, 10, 19, 8, 35, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 8, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000204"),
                            Info = "Migrate objects to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "migrate objects",
                            UploadDate = new DateTime(2019, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000205"),
                            Info = "Create all API's for website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "create API's",
                            UploadDate = new DateTime(2019, 8, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 30, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000206"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 9, 20, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 21, 44, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000207"),
                            Info = "Finish website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "finish website",
                            UploadDate = new DateTime(2019, 9, 23, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 18, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000208"),
                            Info = "Automate pricing and promo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "automate",
                            UploadDate = new DateTime(2019, 10, 2, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 5, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000209"),
                            Info = "Upload data for demo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "demodata",
                            UploadDate = new DateTime(2020, 2, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 31, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000210"),
                            Info = "Migrate data Electrabel to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "migrate data",
                            UploadDate = new DateTime(2020, 2, 21, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 8, 41, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000211"),
                            Info = "Fix issues website selling page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "fix website issues",
                            UploadDate = new DateTime(2020, 5, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 15, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000212"),
                            Info = "Rebuild itempage website and link new products",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "itempage",
                            UploadDate = new DateTime(2020, 5, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 7, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000213"),
                            Info = "Automate selling process and work with new API's",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "automation",
                            UploadDate = new DateTime(2020, 5, 17, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 6, 39, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000214"),
                            Info = "Finish all processes and link to website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "finish automation",
                            UploadDate = new DateTime(2020, 5, 18, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 55, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000215"),
                            Info = "Create new website and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "create website",
                            UploadDate = new DateTime(2018, 3, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 22, 10, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000216"),
                            Info = "Update al items in database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "update items",
                            UploadDate = new DateTime(2018, 3, 25, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000217"),
                            Info = "Automate promo's and guid for admin",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "promo's",
                            UploadDate = new DateTime(2018, 3, 26, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 1, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000218"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000105"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2018, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 0, 12, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000219"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2020, 7, 12, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 47, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000220"),
                            Info = "Link API's to new database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "link API's",
                            UploadDate = new DateTime(2020, 7, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 35, 38, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000221"),
                            Info = "Fix issues with order page on website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2020, 10, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 26, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000222"),
                            Info = "Create link order page and new billing page customer and automate proces",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "link order page",
                            UploadDate = new DateTime(2020, 10, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 45, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000223"),
                            Info = "Fix issue billing page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "issue billing",
                            UploadDate = new DateTime(2020, 10, 16, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 51, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000224"),
                            Info = "Create new order page for customers Europe",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2019, 11, 5, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000225"),
                            Info = "Create API for database to link with order page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "API orderpage",
                            UploadDate = new DateTime(2019, 11, 6, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 6, 5, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000226"),
                            Info = "Create new page for customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "customer portal",
                            UploadDate = new DateTime(2019, 11, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000227"),
                            Info = "Fix issues customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "issues customer portal",
                            UploadDate = new DateTime(2019, 11, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 20, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000228"),
                            Info = "Create API Items and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "API items",
                            UploadDate = new DateTime(2020, 2, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 24, 6, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000229"),
                            Info = "Fix app issues for customer login page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "app issues",
                            UploadDate = new DateTime(2019, 4, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000230"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000111"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2020, 6, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 7, 41, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000231"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000112"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 11, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 10, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000232"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000113"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2018, 10, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 11, 31, 50, 0)
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TaskId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000400"),
                            ReceiverId = "00000000-0000-0000-0000-000000000006",
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "Please update your work asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000401"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201"),
                            Text = "Can I get more info about the task please?"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000402"),
                            ReceiverId = "00000000-0000-0000-0000-000000000007",
                            SenderId = "00000000-0000-0000-0000-000000000002",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202"),
                            Text = "Please do this asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000403"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "What should I do when I finish?"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000300"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000301"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000302"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000303"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000304"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203")
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            Name = "Toyota Motor"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Name = "Colruyt"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Name = "Engie Electrabel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Name = "Janssen Pharmaceutica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Name = "Total Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Name = "BASF Antwerpen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            Name = "Delhaize De Leeuw"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            Name = "Volvo Car Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            Name = "ArcelorMittal Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000109"),
                            Name = "Mastercard Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000110"),
                            Name = "Proximus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000111"),
                            Name = "AXA Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000112"),
                            Name = "Allianz Benelux"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000113"),
                            Name = "Daikin Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000114"),
                            Name = "bpost"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dd6ebce-85f4-4e6d-ab7c-b607464ab8d6",
                            Email = "aboynamedsue@JCash.com",
                            EmailConfirmed = false,
                            LastName = "Cash",
                            LockoutEnabled = false,
                            Name = "Johnny",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fafdf24c-b21b-479a-940d-e09cf05fe805",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bf6c412-762a-4336-83ff-fbf7fdc1de2d",
                            Email = "EchtElkeKant@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Kant",
                            LockoutEnabled = false,
                            Name = "Elke",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df0028a6-2d7f-47a0-b9e9-4dd6efb6e137",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce331d21-afef-4b8c-8956-0b9d8981cd49",
                            Email = "Ialwayswin@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Pot",
                            LockoutEnabled = false,
                            Name = "Jack",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e7ad697-bb4f-4efe-aefe-8d161769223b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eac1c7e-ed0c-443c-9c32-8a48c33efed8",
                            Email = "ErnaVanvoren@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Vanvoren",
                            LockoutEnabled = false,
                            Name = "Erna",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "820962cf-8abb-444c-bcce-864735031226",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "daf80bc9-4319-4963-b876-74a68e0a7b97",
                            Email = "RogerDoeniemee@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Vangenechte",
                            LockoutEnabled = false,
                            Name = "Roger",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17cadf86-8c0a-415e-ab68-6d82a1dcea07",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8e3aa95-7c17-4b10-a8d6-4bc8fe4a2fce",
                            Email = "CharlesDurue@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Verstraete",
                            LockoutEnabled = false,
                            Name = "Karel",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9cbb0a4-28bd-4f86-97cb-92c218068fed",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2420bb64-cb85-4184-824f-6769ed9b4abf",
                            Email = "Katringring@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Vanbelleghem",
                            LockoutEnabled = false,
                            Name = "Katleen",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66bc3ef8-3277-499f-bbb5-fd521df8fe30",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b74d09d-d958-486a-9437-4ea2b75cd1ed",
                            Email = "SnelnEddy@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Guapo",
                            LockoutEnabled = false,
                            Name = "Edwardo",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45d375d0-f518-43a3-a477-c8da3733d31e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceffde7e-e675-4a1b-aa01-cd9bcbb1afca",
                            Email = "Andy123@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Degught",
                            LockoutEnabled = false,
                            Name = "Andy",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c12b780-083c-4f80-a293-36254605b3a8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08e09ea2-c0e9-4088-87a8-76495bcf9990",
                            Email = "IloveyouTomorrow@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Demain",
                            LockoutEnabled = false,
                            Name = "Annie",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "097e323f-c6fa-43a9-84bb-12c9859a7549",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb9bfc01-ec62-415d-85eb-0afed9915d3f",
                            Email = "Satchel@steelpanther.com",
                            EmailConfirmed = false,
                            LastName = "Parrish",
                            LockoutEnabled = false,
                            Name = "Russ",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0af6a186-ad94-4889-b3cb-3ceb9f112a1b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed336b22-16d0-4eac-8dd3-2f35f887266b",
                            Email = "DePijpVanMaarten@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Pijpers",
                            LockoutEnabled = false,
                            Name = "Maarten",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "534b5ac3-61cd-4679-bb2e-98eefc1b9150",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eef81be2-9461-49a3-bccd-aed01c41e851",
                            Email = "EdwardLeCanard@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Vaneende",
                            LockoutEnabled = false,
                            Name = "Edward",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50502a96-e04d-44d9-bcd6-dd0395bc736b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2d6ec7b-61f5-4787-982e-bc4c4b10dc7a",
                            Email = "DeYoeri@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Declerk",
                            LockoutEnabled = false,
                            Name = "Yoeri",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "867cfc84-7d85-4612-9386-cde3ba34ff87",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a6cd57c-67e0-4395-9383-9184f46f4e4a",
                            Email = "CalmingCamille@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Thee",
                            LockoutEnabled = false,
                            Name = "Camille",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54e44d45-64e8-429b-9e53-e41f84cb7e2c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1824f4f2-3824-426d-8701-4218e80a6235",
                            Email = "Thebestginger@qotsa.com",
                            EmailConfirmed = false,
                            LastName = "Homme",
                            LockoutEnabled = false,
                            Name = "Josh",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "601affa1-7ff7-477e-88ef-e0fdf2e228af",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b71f5013-7aa8-43ac-a7b8-7c0351683e9d",
                            Email = "Zwaffelaere@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Uytebroeck",
                            LockoutEnabled = false,
                            Name = "Piet",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30be302e-ed49-44cc-8417-5da0a4def116",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdca91cc-11cc-4e88-b1a0-edfedf0e96cd",
                            Email = "SterkeJan33@pandora.be",
                            EmailConfirmed = false,
                            LastName = "Lefort",
                            LockoutEnabled = false,
                            Name = "Jan",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82e51ffc-d9be-459e-a610-7f725fccc7df",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32fc5605-bcaf-41b7-8eae-a472350e41b9",
                            Email = "RietjeGessof@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Gessof",
                            LockoutEnabled = false,
                            Name = "Rita",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03b86e30-c39c-47fb-89ff-d09089e61d46",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9988662f-1e8e-4cec-a105-87343418c730",
                            Email = "willywilly@thescabs.be",
                            EmailConfirmed = false,
                            LastName = "Lambregt",
                            LockoutEnabled = false,
                            Name = "Willy",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10473684-b153-4036-8a1b-8d5d345cd2d8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4b421db-8083-496b-bd13-8eca90b49f87",
                            Email = "PescadoLover@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Vervis",
                            LockoutEnabled = false,
                            Name = "Kelly",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "659ba673-3ccf-41c9-88b6-5f7d71626714",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000022",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b18ebb0-51c8-419f-b549-aca85978eed9",
                            Email = "TomVanmarcke@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Vantomme",
                            LockoutEnabled = false,
                            Name = "Marc",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a13339d9-ec37-41dc-83e1-69c576639152",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000023",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b14cc51f-cc94-45c9-a3a7-fbfc6afc83cd",
                            Email = "Loewiloewie@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Decruy",
                            LockoutEnabled = false,
                            Name = "Louis",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "668cb0a6-c819-4aab-a95a-ba007d0a7558",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000024",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "483c5b7d-3bc0-4753-83be-fcb5375e93bc",
                            Email = "Giezijtem@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Emnie",
                            LockoutEnabled = false,
                            Name = "Ben",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac794649-de65-4e7d-a0ad-d38f5b362b13",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000025",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24be20e6-6ac8-4607-bea4-4700b3eebc36",
                            Email = "ConnieBeter@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Moeleker",
                            LockoutEnabled = false,
                            Name = "Connie",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8accb61f-c739-4125-8a54-16456d44219c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000026",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f97b14a5-6d52-4bc3-a32e-74836b9072fa",
                            Email = "GezondePeter@telenet.be",
                            EmailConfirmed = false,
                            LastName = "Celie",
                            LockoutEnabled = false,
                            Name = "Peter",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "129eeebc-663a-4011-b876-1074d6b73f59",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000027",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4e1d3ec-306b-4762-a51f-bedec9341e51",
                            Email = "Bennernie@skynet.be",
                            EmailConfirmed = false,
                            LastName = "Thuys",
                            LockoutEnabled = false,
                            Name = "Benny",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63ce733a-18c4-48e4-9f2f-4b3bd0a90ae1",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acfd418f-095e-4aa0-ac4a-e18be1a25c4d",
                            Email = "Thebestbusker@london.com",
                            EmailConfirmed = false,
                            LastName = "Cole",
                            LockoutEnabled = false,
                            Name = "Cam",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4bf8e6c-74e5-4f7f-a5b9-7030dd4af8d4",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000029",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95ca6aba-a19c-499c-8a01-00a4600a51c2",
                            Email = "CoronaTopper@gmail.com",
                            EmailConfirmed = false,
                            LastName = "Root",
                            LockoutEnabled = false,
                            Name = "Claude",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4caf87ab-bda4-414b-9ecf-c63861401351",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000030",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbf926d4-17e3-4b46-8bd1-4f98fe0cf898",
                            Email = "rapgewoon@hotmail.com",
                            EmailConfirmed = false,
                            LastName = "Wenne",
                            LockoutEnabled = false,
                            Name = "Eve",
                            Password = "TimeReg2020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5991d11-1d4a-4b7e-a125-c3b75e02fda8",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000007",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000008",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000008",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000204")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000009",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000205")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000010",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000206")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000207")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000208")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000011",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000209")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000015",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000210")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000016",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000211")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000017",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000212")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000020",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000213")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000020",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000214")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000215")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000216")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000021",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000217")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000022",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000218")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000023",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000219")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000024",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000220")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000024",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000221")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000025",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000223")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000017",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000224")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000025",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000225")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000026",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000226")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000027",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000227")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000028",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000228")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000029",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000229")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000030",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000230")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000015",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000231")
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000030",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000232")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Messages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Pictures")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("TaskUsers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
