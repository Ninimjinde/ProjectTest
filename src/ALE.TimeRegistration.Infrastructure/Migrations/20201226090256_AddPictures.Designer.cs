// <auto-generated />
using System;
using ALE.TimeRegistration.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ALE.TimeRegistration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201226090256_AddPictures")]
    partial class AddPictures
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000200"),
                            Info = "Create API Items",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create API",
                            UploadDate = new DateTime(2018, 10, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000201"),
                            Info = "Fix issues Items API",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API issues",
                            UploadDate = new DateTime(2018, 10, 15, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000202"),
                            Info = "Create new properties Item object",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "Create properties",
                            UploadDate = new DateTime(2018, 10, 18, 9, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000203"),
                            Info = "Link Item to new API vendor",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000100"),
                            TaskName = "API vendor link",
                            UploadDate = new DateTime(2018, 10, 19, 8, 35, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000204"),
                            Info = "Migrate objects to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "migrate objects",
                            UploadDate = new DateTime(2019, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000205"),
                            Info = "Create all API's for website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "create API's",
                            UploadDate = new DateTime(2019, 8, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000206"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 9, 20, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000207"),
                            Info = "Finish website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "finish website",
                            UploadDate = new DateTime(2019, 9, 23, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000208"),
                            Info = "Automate pricing and promo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000101"),
                            TaskName = "automate",
                            UploadDate = new DateTime(2019, 10, 2, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000209"),
                            Info = "Upload data for demo",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "demodata",
                            UploadDate = new DateTime(2020, 2, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000210"),
                            Info = "Migrate data Electrabel to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000102"),
                            TaskName = "migrate data",
                            UploadDate = new DateTime(2020, 2, 21, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000211"),
                            Info = "Fix issues website selling page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "fix website issues",
                            UploadDate = new DateTime(2020, 5, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000212"),
                            Info = "Rebuild itempage website and link new products",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "itempage",
                            UploadDate = new DateTime(2020, 5, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000213"),
                            Info = "Automate selling process and work with new API's",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "automation",
                            UploadDate = new DateTime(2020, 5, 17, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000214"),
                            Info = "Finish all processes and link to website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000103"),
                            TaskName = "finish automation",
                            UploadDate = new DateTime(2020, 5, 18, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000215"),
                            Info = "Create new website and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "create website",
                            UploadDate = new DateTime(2018, 3, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000216"),
                            Info = "Update al items in database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "update items",
                            UploadDate = new DateTime(2018, 3, 25, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000217"),
                            Info = "Automate promo's and guid for admin",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000104"),
                            TaskName = "promo's",
                            UploadDate = new DateTime(2018, 3, 26, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000218"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000105"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2018, 8, 14, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000219"),
                            Info = "Upload data and create database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "upload data",
                            UploadDate = new DateTime(2020, 7, 12, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000220"),
                            Info = "Link API's to new database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000106"),
                            TaskName = "link API's",
                            UploadDate = new DateTime(2020, 7, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000221"),
                            Info = "Fix issues with order page on website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2020, 10, 13, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000222"),
                            Info = "Create link order page and new billing page customer and automate proces",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "link order page",
                            UploadDate = new DateTime(2020, 10, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000223"),
                            Info = "Fix issue billing page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000107"),
                            TaskName = "issue billing",
                            UploadDate = new DateTime(2020, 10, 16, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000224"),
                            Info = "Create new order page for customers Europe",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "order page",
                            UploadDate = new DateTime(2019, 11, 5, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000225"),
                            Info = "Create API for database to link with order page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000108"),
                            TaskName = "API orderpage",
                            UploadDate = new DateTime(2019, 11, 6, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000226"),
                            Info = "Create new page for customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "customer portal",
                            UploadDate = new DateTime(2019, 11, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000227"),
                            Info = "Fix issues customer portal",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000109"),
                            TaskName = "issues customer portal",
                            UploadDate = new DateTime(2019, 11, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000228"),
                            Info = "Create API Items and link to database",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "API items",
                            UploadDate = new DateTime(2020, 2, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000229"),
                            Info = "Fix app issues for customer login page",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000110"),
                            TaskName = "app issues",
                            UploadDate = new DateTime(2019, 4, 8, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000230"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000111"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2020, 6, 20, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000231"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000112"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2019, 11, 15, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000232"),
                            Info = "Create full working website",
                            ProjectId = new Guid("00000000-0000-0000-0000-000000000113"),
                            TaskName = "Website",
                            UploadDate = new DateTime(2018, 10, 10, 8, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TaskId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000400"),
                            ReceiverId = "00000000-0000-0000-0000-000000000006",
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "Please update your work asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000401"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201"),
                            Text = "Can I get more info about the task please?"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000402"),
                            ReceiverId = "00000000-0000-0000-0000-000000000007",
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202"),
                            Text = "Please do this asap."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000403"),
                            ReceiverId = "00000000-0000-0000-0000-000000000001",
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            Text = "What should I do when I finish?"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000300"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000301"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000302"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000303"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000304"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203")
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            Name = "Toyota Motor"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Name = "Colruyt"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Name = "Engie Electrabel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Name = "Janssen Pharmaceutica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Name = "Total Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Name = "BASF Antwerpen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            Name = "Delhaize De Leeuw"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            Name = "Volvo Car Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            Name = "ArcelorMittal Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000109"),
                            Name = "Mastercard Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000110"),
                            Name = "Proximus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000111"),
                            Name = "AXA Belgium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000112"),
                            Name = "Allianz Benelux"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000113"),
                            Name = "Daikin Europe"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000114"),
                            Name = "bpost"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc58",
                            Email = "aboynamedsue@JCash.com",
                            EmailConfirmed = true,
                            LastName = "Cash",
                            LockoutEnabled = false,
                            Name = "Johnny",
                            NormalizedEmail = "ABOYNAMEDSUE@JCASH.COM",
                            NormalizedUserName = "ABOYNAMEDSUE@JCASH.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED6tOY7ieTuIJrBF09V4kD1PAnL8bm8ygC9cOf5gxGKwL/kazNS/5h66vJh0C3geOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TwoFactorEnabled = false,
                            UserName = "aboynamedsue@JCash.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea936088-7c16-4dae-8679-ccb63b4b6529",
                            Email = "EchtElkeKant@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Kant",
                            LockoutEnabled = false,
                            Name = "Elke",
                            NormalizedEmail = "ECHTELKEKANT@HOTMAIL.COM",
                            NormalizedUserName = "ECHTELKEKANT@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG11Wlae3IDWSk8AUlBgCJyK+JMkzvOTYqhtspbvpfZ0o9k+DQ7E8lvhDxjwutejhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "LPRQIVUHQZ9B9VK0RQPN9LLR2JUDMOKX",
                            TwoFactorEnabled = false,
                            UserName = "EchtElkeKant@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87512ca8-3082-41c9-a799-125a1724dfdb",
                            Email = "Ialwayswin@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Pot",
                            LockoutEnabled = false,
                            Name = "Jack",
                            NormalizedEmail = "IALWAYSWIN@GMAIL.COM",
                            NormalizedUserName = "IALWAYSWIN@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEEWQGVNc0n3SKvdEAY06vomXeiRpL833LuKOaSSrEi5NNNkkJOxya3fviK60oun93w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CGZLWFPLDP93ZCFWTQ19E9LGZAH3EDV4",
                            TwoFactorEnabled = false,
                            UserName = "Ialwayswin@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a9bb722-0187-44d6-ab37-35bd39a46abd",
                            Email = "ErnaVanvoren@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Vanvoren",
                            LockoutEnabled = false,
                            Name = "Erna",
                            NormalizedEmail = "ERNAVANVOREN@HOTMAIL.COM",
                            NormalizedUserName = "ERNAVANVOREN@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEDbmZ4kMpVLZ6YJ1bxHX6jtS4O5K0ryhKiSz4vfmcWrBJtZE/m1gqyRmB+mkP2ZLuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KEVV7QQDZVPGXW0LIRHWRUBJDWV1BEOK",
                            TwoFactorEnabled = false,
                            UserName = "ErnaVanvoren@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fa68a7a-8187-440a-92d3-9332f602a90c",
                            Email = "RogerDoeniemee@telenet.be",
                            EmailConfirmed = true,
                            LastName = "Vangenechte",
                            LockoutEnabled = false,
                            Name = "Roger",
                            NormalizedEmail = "ROGERDOENIEMEE@TELENET.BE",
                            NormalizedUserName = "ROGERDOENIEMEE@TELENET.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAELWevp6Bs9r50BNj3gy9hvilN84xUJGNkuHlgq7qn5MB1rFLUPmoHEUoOLBFOMdMSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DMQ1MNFMDVWEMHCWA4TOPXZUCR97WIGJ",
                            TwoFactorEnabled = false,
                            UserName = "RogerDoeniemee@telenet.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6089fee-e038-4e51-a688-efd386d13801",
                            Email = "CharlesDurue@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Verstraete",
                            LockoutEnabled = false,
                            Name = "Karel",
                            NormalizedEmail = "CHARLESDURUE@HOTMAIL.COM",
                            NormalizedUserName = "CHARLESDURUE@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEHVWBd18B3PJI3At7485dyEyL28Cz7T7VPj+LT4wrtiP0+KoJPZfxGXgSW+B+Ecvdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GOHAS6DGS3TEFB8CKVA1O0YY7L7QOJGY",
                            TwoFactorEnabled = false,
                            UserName = "CharlesDurue@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b61bb5e0-6249-4017-8f66-c2e793cead19",
                            Email = "katringring@skynet.be",
                            EmailConfirmed = true,
                            LastName = "Vanbelleghem",
                            LockoutEnabled = false,
                            Name = "Katleen",
                            NormalizedEmail = "KATRINGRING@SKYNET.BE",
                            NormalizedUserName = "KATRINGRING@SKYNET.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEMuPI0U9MFGR2KyxqK5I0v8P9ARrgac4yZ/KpYZWfr8opBqUvX/xJScw1V/G2XxNew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TX2YKCJILNPIIAS7Y4XDXNU7ATXAMEXW",
                            TwoFactorEnabled = false,
                            UserName = "katringring@skynet.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71225b1c-93a9-4e98-9769-e2bac0cf8c81",
                            Email = "SnelnEddy@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Guapo",
                            LockoutEnabled = false,
                            Name = "Edwardo",
                            NormalizedEmail = "SNELNEDDY@HOTMAIL.COM",
                            NormalizedUserName = "SNELNEDDY@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEClCbvkwBsnPSk99aPx960A8n6dzSI3vgsRnbxVeZxs+dnglrOre6OSj+ah3aWRTDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AY8SBXVKA6Z6MXJXBYIIE9JIAOQV2DJO",
                            TwoFactorEnabled = false,
                            UserName = "SnelnEddy@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00b46ecb-768e-4d9e-8168-c947145342aa",
                            Email = "Andy123@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Degught",
                            LockoutEnabled = false,
                            Name = "Andy",
                            NormalizedEmail = "ANDY123@GMAIL.COM",
                            NormalizedUserName = "ANDY123@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEN2cXoJZ1VQdrM2qKSTiR4RqMVTNW2nMUFUMeL8wpQyKpCQVUSCzB0IxscbNDTn7AQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AERAYD2O3KEIAGCLLIP7O8QNVSXU8PUD",
                            TwoFactorEnabled = false,
                            UserName = "Andy123@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6d41496-5440-4fb4-b12b-b36a66bd271c",
                            Email = "IloveyouTomorrow@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Demain",
                            LockoutEnabled = false,
                            Name = "Annie",
                            NormalizedEmail = "ILOVEYOUTOMORROW@HOTMAIL.COM",
                            NormalizedUserName = "ILOVEYOUTOMORROW@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEOe8GqnKL4Aua6mwyx+wCgcl5f137ks6OXqx+ZJpMxHMECzBO7Ezjnhi7ls3oG25YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "OJUDGXCPUCPYDMIQTIWMSRTLXH4NMKDB",
                            TwoFactorEnabled = false,
                            UserName = "IloveyouTomorrow@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a01d31d2-66ce-40a5-9a38-f5a02d65cdae",
                            Email = "Satchel@steelpanther.com",
                            EmailConfirmed = true,
                            LastName = "Parrish",
                            LockoutEnabled = false,
                            Name = "Russ",
                            NormalizedEmail = "SATCHEL@STEELPANTHER.COM",
                            NormalizedUserName = "SATCHEL@STEELPANTHER.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEMNm9quUuSlE7k8mWkMWgxVS2aeEtz1ERiVNGRItnlwCCQIAXgGW4VZRDcEFySmWWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "W7VNKA17XODMDCKG5JBXZQCLUQSRF32F",
                            TwoFactorEnabled = false,
                            UserName = "Satchel@steelpanther.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "727ea679-d671-4406-97cf-3a00468fd7e6",
                            Email = "DePijpVanMaarten@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Pijpers",
                            LockoutEnabled = false,
                            Name = "Maarten",
                            NormalizedEmail = "DEPIJPVANMAARTEN@GMAIL.COM",
                            NormalizedUserName = "DEPIJPVANMAARTEN@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEMwCGgp9bD8Da+E/xlZ4I9tAt+o+JsznkyjGRiklY38qswZnAo4S2Q3Iwws7wv7eLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NZVCLM9FJXG84V7AAF3WNV9UX88PSSAD",
                            TwoFactorEnabled = false,
                            UserName = "DePijpVanMaarten@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "979b7fae-dee1-443f-89cd-cd5d7e075296",
                            Email = "EdwardLeCanard@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Vaneende",
                            LockoutEnabled = false,
                            Name = "Edward",
                            NormalizedEmail = "EDWARDLECANARD@HOTMAIL.COM",
                            NormalizedUserName = "EDWARDLECANARD@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEJeoJysfNAtAxsddCfvQj+HI51NpbDvicl9wys2ri7U2s76NYvwPdDRIsgZ3Lzg4Jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "X50KHZXPUONAXCIOYAP1VN2KWJNQF8YF",
                            TwoFactorEnabled = false,
                            UserName = "EdwardLeCanard@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3205df9b-0609-478c-953a-3ebc1cbd3894",
                            Email = "DeYoeri@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Declerk",
                            LockoutEnabled = false,
                            Name = "Yoeri",
                            NormalizedEmail = "DEYOERI@GMAIL.COM",
                            NormalizedUserName = "DEYOERI@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEOk+qCHPCRpkhgLYpuzktWRnZRfaLMYu/KnREpmehxZmTD3m+5dfDXAl+cEPySG+cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E9HTNSBN303BXB434HYORNEMWKFR9F0K",
                            TwoFactorEnabled = false,
                            UserName = "DeYoeri@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7d20267-f0ca-40b8-b5a9-82c6e1bbf7b6",
                            Email = "CalmingCamille@telenet.be",
                            EmailConfirmed = true,
                            LastName = "Thee",
                            LockoutEnabled = false,
                            Name = "Camille",
                            NormalizedEmail = "CALMINGCAMILLE@TELENET.BE",
                            NormalizedUserName = "CALMINGCAMILLE@TELENET.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEJApqWammWE0j3nuCjgeMHpKcJ6rSye6YoLMkH32Lf4b1esDy+s0OEMe5u1Q/bXKYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NB8OXAMNMR8SWHOY6ACNDYQE4VAGFEEP",
                            TwoFactorEnabled = false,
                            UserName = "CalmingCamille@telenet.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59cfeb05-2937-4806-8f27-accbc1ccfe91",
                            Email = "Thebestginger@qotsa.com",
                            EmailConfirmed = true,
                            LastName = "Homme",
                            LockoutEnabled = false,
                            Name = "Josh",
                            NormalizedEmail = "THEBESTGINGER@QOTSA.COM",
                            NormalizedUserName = "THEBESTGINGER@QOTSA.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEARSngz2HH2hasKsZQa47evmZOVbjxGZp3zCndgJL+MFtJJIXJuUKmr+MBI3hPIXAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ZUYKIDLJWUZXNXN6BK6Z6QCZO5WXOYNR",
                            TwoFactorEnabled = false,
                            UserName = "Thebestginger@qotsa.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68e80c7b-4679-4fc7-8f8a-7dfcf165d726",
                            Email = "Zwaffelaere@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Uytebroeck",
                            LockoutEnabled = false,
                            Name = "Piet",
                            NormalizedEmail = "ZWAFFELAERE@GMAIL.COM",
                            NormalizedUserName = "ZWAFFELAERE@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3KTMxZ05LlDXdfuH4rCJmN+6ELP+g58llGrQoSXj47OGHTpqg0DEtCMWukQX6qYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HGIXXQPIK4FFBOOUNMFY7GN6GDHXEVV1",
                            TwoFactorEnabled = false,
                            UserName = "Zwaffelaere@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1000963-395c-4507-83df-8f4b9e784db1",
                            Email = "SterkeJan33@pandora.be",
                            EmailConfirmed = true,
                            LastName = "Lefort",
                            LockoutEnabled = false,
                            Name = "Jan",
                            NormalizedEmail = "STERKEJAN33@PANDORA.BE",
                            NormalizedUserName = "STERKEJAN33@PANDORA.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJT5/kRGHwivguLKGGZAZvU0g02kWapCV768VxGd3OTud3zIZYxIQ2PPHY+paPaeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WGY5YWIB4XK6LUI2TBROBMXVLQKNNWOV",
                            TwoFactorEnabled = false,
                            UserName = "SterkeJan33@pandora.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9e1dbac-e651-482a-98a4-8e24583f29c0",
                            Email = "RietjeGessof@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Gessof",
                            LockoutEnabled = false,
                            Name = "Rita",
                            NormalizedEmail = "RIETJEGESSOF@HOTMAIL.COM",
                            NormalizedUserName = "RIETJEGESSOF@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEKs/rRqhN1eDre7uJ10AyKdlWpTrmCPBu5S/yNgDIFJbOBgt4whXuh0gmrxhNtAHyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9H2QG7IPOUORADDNMF2ISIRSOGZJNXGZ",
                            TwoFactorEnabled = false,
                            UserName = "RietjeGessof@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86d42357-8dbc-48c9-886d-3a1b957f2075",
                            Email = "willywilly@thescabs.be",
                            EmailConfirmed = true,
                            LastName = "Lambregt",
                            LockoutEnabled = false,
                            Name = "Willy",
                            NormalizedEmail = "WILLYWILLY@THESCABS.BE",
                            NormalizedUserName = "WILLYWILLY@THESCABS.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAELriZaBkvsvTyxEuVFE93uw2yzXDKT8HX5tiJkADPI5HcxtDRLDzO1Q+zH4ClN59EA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7F7LSOHNMOKGFGQVMMGOX3SHM3PBNHQB",
                            TwoFactorEnabled = false,
                            UserName = "willywilly@thescabs.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7280862-2341-462a-8fb5-1380edea1422",
                            Email = "PescadoLover@skynet.be",
                            EmailConfirmed = true,
                            LastName = "Vervis",
                            LockoutEnabled = false,
                            Name = "Kelly",
                            NormalizedEmail = "PESCADOLOVER@SKYNET.BE",
                            NormalizedUserName = "PESCADOLOVER@SKYNET.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEE3H8MxhIHGmVLH9dG7JjpbLSZ0cg4vQV2gmgluVlrhn2rn3zJ0mFSUqfMq8tuEgUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WGLZXEZUI3NLP8ZWUYK5CFN8XWBT7ATX",
                            TwoFactorEnabled = false,
                            UserName = "PescadoLover@skynet.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000022",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fc3e5d4-f6ce-4160-aa94-d2acc0be114d",
                            Email = "TomVanmarcke@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Vantomme",
                            LockoutEnabled = false,
                            Name = "Marc",
                            NormalizedEmail = "TOMVANMARCKE@GMAIL.COM",
                            NormalizedUserName = "TOMVANMARCKE@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEDxryCtm7U6h2BimQyjLbM900F/SGc1JAjTS/XTHfPStocBFHp6iAVq3Ecs2MXOV+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "OIKDBFPAR5GJKJ91OUAOXNKR1CMLSTFC",
                            TwoFactorEnabled = false,
                            UserName = "TomVanmarcke@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000023",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f42511c-f74f-442c-a8f2-28b10d2bc114",
                            Email = "Loewiloewie@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Decruy",
                            LockoutEnabled = false,
                            Name = "Louis",
                            NormalizedEmail = "LOEWILOEWIE@HOTMAIL.COM",
                            NormalizedUserName = "LOEWILOEWIE@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVSAvaYjMKruUblkFz5g6evdnPe4fswiZ6j2aJ50yAC/HyniEa3urrPO+a5hePm+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "F0SRUYTP4OF6TSFD3CNJBX5ECAJFPPFZ",
                            TwoFactorEnabled = false,
                            UserName = "Loewiloewie@hotmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000024",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b52a849c-4b01-4dda-ac2f-30f6b08fe075",
                            Email = "Giezijtem@skynet.be",
                            EmailConfirmed = true,
                            LastName = "Emnie",
                            LockoutEnabled = false,
                            Name = "Ben",
                            NormalizedEmail = "GIEZIJTEM@SKYNET.BE",
                            NormalizedUserName = "GIEZIJTEM@SKYNET.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAENBJehjbtwsZE+/Ol8q4At6JoroHQYy9CBIex7G3A9Y580scNejJYZBuitQh0EW6EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PHLIIUHLZLGB2UTDD2LHUFROZ7TDQAD7",
                            TwoFactorEnabled = false,
                            UserName = "Giezijtem@skynet.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000025",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "018aba24-a96f-44e9-a058-a047d0bd0b53",
                            Email = "ConnieBeter@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Moeleker",
                            LockoutEnabled = false,
                            Name = "Connie",
                            NormalizedEmail = "CONNIEBETER@GMAIL.COM",
                            NormalizedUserName = "CONNIEBETER@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEBTBFvgJD7yu4l5kc5ylErIY//3qrAHPRQ54KOKeewQYYb03tQ+BKWOXE+MBBkiyVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FWM36IDUG00055IF56RZWA2CR9OYCVB3",
                            TwoFactorEnabled = false,
                            UserName = "ConnieBeter@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000026",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc117b43-d867-4f86-8ac4-8d4efc2820c4",
                            Email = "GezondePeter@telenet.be",
                            EmailConfirmed = true,
                            LastName = "Celie",
                            LockoutEnabled = false,
                            Name = "Peter",
                            NormalizedEmail = "GEZONDEPETER@TELENET.BE",
                            NormalizedUserName = "GEZONDEPETER@TELENET.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKoZRj04th3h1iJRArtBMuSG3z2t7BAAPos8Ty+qhhQEtzqcHemv3hL/3asoScS4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TJLKW00301EENWVWL2MCPLTCU18IT7XY",
                            TwoFactorEnabled = false,
                            UserName = "GezondePeter@telenet.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000027",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1993d307-e257-4e29-8487-b230037199aa",
                            Email = "Bennernie@skynet.be",
                            EmailConfirmed = true,
                            LastName = "Thuys",
                            LockoutEnabled = false,
                            Name = "Benny",
                            NormalizedEmail = "BENNERNIE@SKYNET.BE",
                            NormalizedUserName = "BENNERNIE@SKYNET.BE",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAENIzLxlXkoui1eUvTt8aMLY+qEqU2QpCciY1ImOg2w6IiYlwncXvXG4b7J8OfKnZjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KXW8TS8VIEG0BL1OIA7U2PASSALDXMV3",
                            TwoFactorEnabled = false,
                            UserName = "Bennernie@skynet.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b017e971-0a03-4aa0-86e5-b3d1c603d64b",
                            Email = "Thebestbusker@london.com",
                            EmailConfirmed = true,
                            LastName = "Cole",
                            LockoutEnabled = false,
                            Name = "Cam",
                            NormalizedEmail = "THEBESTBUSKER@LONDON.COM",
                            NormalizedUserName = "THEBESTBUSKER@LONDON.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEIdt0t0WAAtRg8szOMbdSzZ5uevq/HamriNnveJrrdtgEPpMe5RVl2oqGqv+JU/S9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VRVLNRMUMHA6IADTQ7CO9VCIMVX4OMO5",
                            TwoFactorEnabled = false,
                            UserName = "Thebestbusker@london.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000029",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50d8c368-d7f1-4e3f-8216-6ba5c5e3e76a",
                            Email = "CoronaTopper@gmail.com",
                            EmailConfirmed = true,
                            LastName = "Root",
                            LockoutEnabled = false,
                            Name = "Claude",
                            NormalizedEmail = "CORONATOPPER@GMAIL.COM",
                            NormalizedUserName = "CORONATOPPER@GMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAEKzDLGfmznWnfUkEhdgkNQVpmjbdpLlVo/AQsn/k83HDLzeuNImxFZZPbc1ASKtMUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "W7IEDSQT3GEVZWUOTXG8CL1PI3K6MXU7",
                            TwoFactorEnabled = false,
                            UserName = "CoronaTopper@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000030",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55690745-3bfd-43ad-abbe-af37f549182c",
                            Email = "rapgewoon@hotmail.com",
                            EmailConfirmed = true,
                            LastName = "Wenne",
                            LockoutEnabled = false,
                            Name = "Eve",
                            NormalizedEmail = "RAPGEWOON@HOTMAIL.COM",
                            NormalizedUserName = "RAPGEWOON@HOTMAIL.COM",
                            Password = "TimeReg2020",
                            PasswordHash = "AQAAAAEAACcQAAAAENJtexRWwLjEfLnMjn9aa3SD3h7yuJyKvs00i3l85/AI1kX048tCK0SE9L0TYJbVng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JF6GSUYRRSWNWXY9Z1HUJLK1GUQREXOO",
                            TwoFactorEnabled = false,
                            UserName = "rapgewoon@hotmail.com"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("WorkDateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000200"),
                            UserId = "00000000-0000-0000-0000-000000000006",
                            WorkDateTime = new DateTime(2018, 10, 14, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 18, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000201"),
                            UserId = "00000000-0000-0000-0000-000000000006",
                            WorkDateTime = new DateTime(2018, 10, 15, 12, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 28, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000202"),
                            UserId = "00000000-0000-0000-0000-000000000007",
                            WorkDateTime = new DateTime(2018, 10, 18, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 28, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000203"),
                            UserId = "00000000-0000-0000-0000-000000000008",
                            WorkDateTime = new DateTime(2018, 10, 19, 11, 35, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 8, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000204"),
                            UserId = "00000000-0000-0000-0000-000000000008",
                            WorkDateTime = new DateTime(2019, 8, 14, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000205"),
                            UserId = "00000000-0000-0000-0000-000000000009",
                            WorkDateTime = new DateTime(2019, 8, 15, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 30, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000206"),
                            UserId = "00000000-0000-0000-0000-000000000010",
                            WorkDateTime = new DateTime(2019, 9, 20, 15, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 21, 44, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000206"),
                            UserId = "00000000-0000-0000-0000-000000000010",
                            WorkDateTime = new DateTime(2019, 9, 23, 15, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 18, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000207"),
                            UserId = "00000000-0000-0000-0000-000000000011",
                            WorkDateTime = new DateTime(2019, 10, 4, 6, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 5, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000208"),
                            UserId = "00000000-0000-0000-0000-000000000011",
                            WorkDateTime = new DateTime(2020, 2, 20, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 31, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000209"),
                            UserId = "00000000-0000-0000-0000-000000000011",
                            WorkDateTime = new DateTime(2020, 2, 21, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 8, 41, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000210"),
                            UserId = "00000000-0000-0000-0000-000000000015",
                            WorkDateTime = new DateTime(2020, 5, 13, 16, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 15, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000211"),
                            UserId = "00000000-0000-0000-0000-000000000016",
                            WorkDateTime = new DateTime(2020, 5, 15, 13, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 5, 7, 40, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000212"),
                            UserId = "00000000-0000-0000-0000-000000000017",
                            WorkDateTime = new DateTime(2020, 5, 17, 12, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 6, 39, 50, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000213"),
                            UserId = "00000000-0000-0000-0000-000000000020",
                            WorkDateTime = new DateTime(2020, 5, 18, 13, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 55, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000214"),
                            UserId = "00000000-0000-0000-0000-000000000020",
                            WorkDateTime = new DateTime(2018, 3, 20, 14, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 22, 10, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000215"),
                            UserId = "00000000-0000-0000-0000-000000000021",
                            WorkDateTime = new DateTime(2018, 3, 25, 15, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000216"),
                            UserId = "00000000-0000-0000-0000-000000000021",
                            WorkDateTime = new DateTime(2018, 3, 26, 16, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 1, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000217"),
                            UserId = "00000000-0000-0000-0000-000000000021",
                            WorkDateTime = new DateTime(2018, 8, 14, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 0, 12, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000218"),
                            UserId = "00000000-0000-0000-0000-000000000022",
                            WorkDateTime = new DateTime(2020, 7, 12, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 4, 47, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000219"),
                            UserId = "00000000-0000-0000-0000-000000000023",
                            WorkDateTime = new DateTime(2020, 7, 13, 14, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 35, 38, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000220"),
                            UserId = "00000000-0000-0000-0000-000000000024",
                            WorkDateTime = new DateTime(2020, 10, 13, 15, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 26, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000221"),
                            UserId = "00000000-0000-0000-0000-000000000024",
                            WorkDateTime = new DateTime(2020, 10, 15, 16, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 45, 10, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000223"),
                            UserId = "00000000-0000-0000-0000-000000000025",
                            WorkDateTime = new DateTime(2020, 10, 16, 17, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 51, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000224"),
                            UserId = "00000000-0000-0000-0000-000000000017",
                            WorkDateTime = new DateTime(2019, 11, 5, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 1, 8, 42, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000225"),
                            UserId = "00000000-0000-0000-0000-000000000025",
                            WorkDateTime = new DateTime(2019, 11, 6, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 6, 5, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000226"),
                            UserId = "00000000-0000-0000-0000-000000000026",
                            WorkDateTime = new DateTime(2019, 11, 8, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 19, 8, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000227"),
                            UserId = "00000000-0000-0000-0000-000000000027",
                            WorkDateTime = new DateTime(2019, 11, 10, 13, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 0, 20, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000228"),
                            UserId = "00000000-0000-0000-0000-000000000028",
                            WorkDateTime = new DateTime(2020, 2, 10, 12, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 3, 24, 6, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000229"),
                            UserId = "00000000-0000-0000-0000-000000000029",
                            WorkDateTime = new DateTime(2019, 4, 8, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 2, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000230"),
                            UserId = "00000000-0000-0000-0000-000000000030",
                            WorkDateTime = new DateTime(2020, 6, 20, 11, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 7, 41, 20, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000231"),
                            UserId = "00000000-0000-0000-0000-000000000015",
                            WorkDateTime = new DateTime(2019, 11, 15, 14, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 10, 35, 41, 0)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            TaskId = new Guid("00000000-0000-0000-0000-000000000232"),
                            UserId = "00000000-0000-0000-0000-000000000030",
                            WorkDateTime = new DateTime(2018, 10, 10, 10, 30, 12, 0, DateTimeKind.Unspecified),
                            WorkTime = new TimeSpan(0, 11, 31, 50, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "083c2767-8832-40b8-a594-3484a4b07386",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.AppTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Messages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("Pictures")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.AppTask", "Task")
                        .WithMany("TaskUsers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
