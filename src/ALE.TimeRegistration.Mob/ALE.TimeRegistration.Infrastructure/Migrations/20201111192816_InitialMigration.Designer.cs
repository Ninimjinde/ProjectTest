// <auto-generated />
using System;
using ALE.TimeRegistration.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ALE.TimeRegistration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201111192816_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TaskId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "aboynamedsue@JCash.com",
                            LastName = "Cash",
                            Name = "Johnny",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "EchtElkeKant@hotmail.com",
                            LastName = "Kant",
                            Name = "Elke",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Email = "Ialwayswin@gmail.com",
                            LastName = "Pot",
                            Name = "Jack",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Email = "ErnaVanvoren@hotmail.com",
                            LastName = "Vanvoren",
                            Name = "Erna",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Email = "RogerDoeniemee@telenet.be",
                            LastName = "Vangenechte",
                            Name = "Roger",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Email = "CharlesDurue@hotmail.com",
                            LastName = "Verstraete",
                            Name = "Karel",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Email = "Katringring@skynet.be",
                            LastName = "Vanbelleghem",
                            Name = "Katleen",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Email = "SnelnEddy@hotmail.com",
                            LastName = "Guapo",
                            Name = "Edwardo",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Email = "Andy123@gmail.com",
                            LastName = "Degught",
                            Name = "Andy",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Email = "IloveyouTomorrow@hotmail.com",
                            LastName = "Demain",
                            Name = "Annie",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Email = "Satchel@steelpanther.com",
                            LastName = "Parrish",
                            Name = "Russ",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Email = "DePijpVanMaarten@gmail.com",
                            LastName = "Pijpers",
                            Name = "Maarten",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Email = "EdwardLeCanard@hotmail.com",
                            LastName = "Vaneende",
                            Name = "Edward",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Email = "DeYoeri@gmail.com",
                            LastName = "Declerk",
                            Name = "Yoeri",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Email = "CalmingCamille@telenet.be",
                            LastName = "Thee",
                            Name = "Camille",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Email = "Thebestginger@qotsa.com",
                            LastName = "Homme",
                            Name = "Josh",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Email = "Zwaffelaere@gmail.com",
                            LastName = "Uytebroeck",
                            Name = "Piet",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Email = "SterkeJan33@pandora.be",
                            LastName = "Lefort",
                            Name = "Jan",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Email = "RietjeGessof@hotmail.com",
                            LastName = "Gessof",
                            Name = "Rita",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Email = "willywilly@thescabs.be",
                            LastName = "Lambregt",
                            Name = "Willy",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Email = "PescadoLover@skynet.be",
                            LastName = "Vervis",
                            Name = "Kelly",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Email = "TomVanmarcke@gmail.com",
                            LastName = "Vantomme",
                            Name = "Marc",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Email = "Loewiloewie@hotmail.com",
                            LastName = "Decruy",
                            Name = "Louis",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Email = "Giezijtem@skynet.be",
                            LastName = "Emnie",
                            Name = "Ben",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Email = "ConnieBeter@gmail.com",
                            LastName = "Moeleker",
                            Name = "Connie",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            Email = "GezondePeter@telenet.be",
                            LastName = "Celie",
                            Name = "Peter",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            Email = "Bennernie@skynet.be",
                            LastName = "Thuys",
                            Name = "Benny",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            Email = "Thebestbusker@london.com",
                            LastName = "Cole",
                            Name = "Cam",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            Email = "CoronaTopper@gmail.com",
                            LastName = "Root",
                            Name = "Claude",
                            Password = "TimeReg2020"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            Email = "rapgewoon@hotmail.com",
                            LastName = "Wenne",
                            Name = "Eve",
                            Password = "TimeReg2020"
                        });
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Message", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "Sender")
                        .WithMany("SendMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.Task", "Task")
                        .WithMany("Messages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Picture", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.Task", "Task")
                        .WithMany("Pictures")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.Task", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ALE.TimeRegistration.Core.Entities.UserTask", b =>
                {
                    b.HasOne("ALE.TimeRegistration.Core.Entities.Task", "Task")
                        .WithMany("TaskUsers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ALE.TimeRegistration.Core.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
